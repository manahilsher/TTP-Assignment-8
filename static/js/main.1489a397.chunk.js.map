{"version":3,"sources":["components/Table.js","components/TableRow.js","components/TableCell.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","id","rows","map","row","color","numColumns","columns","TableRow","column","currentColor","TableCell","style","backgroundColor","onClick","e","target","App","setCurrentColor","setState","value","addRow","newRows","state","slice","push","count","length","numRows","addColumn","forEach","onChange","this","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAwBeA,G,KApBD,SAACC,GACb,OACE,oCACE,+BACE,2BAAOC,GAAG,aACPD,EAAME,KAAKC,KAAI,SAACC,GACf,OACE,kBAAC,EAAD,CACEC,MAAOL,EAAMK,MACbC,WAAYF,EAAIE,WAChBC,QAASH,EAAIG,kBCAdC,EAVE,SAACR,GAChB,OACE,4BACGA,EAAMO,QAAQJ,KAAI,SAACM,GAClB,OAAO,kBAAC,EAAD,CAAWJ,MAAOI,EAAOJ,MAAOK,aAAcV,EAAMK,aCOpDM,EAZG,SAACX,GACjB,OACE,wBACEY,MAAO,CAAEC,gBAAiBb,EAAMK,OAEhCS,QAAS,SAACC,GACRA,EAAEC,OAAOJ,MAAMC,gBAAkBb,EAAMU,iBCkEhCO,E,kDAvEb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAURkB,gBAAkB,SAACH,GACjB,EAAKI,SAAS,CAAET,aAAcK,EAAEC,OAAOI,SAZtB,EAgBnBC,OAAS,SAACN,GACR,IAAIO,EAAU,EAAKC,MAAMrB,KAAKsB,QAC9BF,EAAQG,KAAK,CAAElB,QAAS,KAExB,IADA,IAAImB,EAAQ,EACLA,IAAU,EAAKH,MAAMjB,YAC1BgB,EAAQA,EAAQK,OAAS,GAAGpB,QAAQkB,KAAK,CAAEpB,MAAO,SAClDqB,IAEF,EAAKP,SAAS,CAAES,QAAS,EAAKL,MAAMK,QAAU,EAAG1B,KAAMoB,KAxBtC,EA4BnBO,UAAY,SAACd,GACX,IAAIO,EAAU,EAAKC,MAAMrB,KACzBoB,EAAQQ,SAAQ,SAAC1B,GACfA,EAAIG,QAAQkB,KAAK,CAAEpB,MAAO,YAE5B,EAAKc,SAAS,CAAEb,WAAY,EAAKiB,MAAMjB,WAAa,EAAGJ,KAAMoB,KA/B7D,EAAKC,MAAQ,CACXb,aAAc,QACdkB,QAAS,EACTtB,WAAY,EACZJ,KAAM,CAAC,CAAEK,QAAS,CAAC,CAAEF,MAAO,YANb,E,qDAqCjB,OACE,oCAEE,8BACE,2BACE,8CACA,4BACEJ,GAAG,eACH8B,SAAUC,KAAKd,gBACfE,MAAOY,KAAKT,MAAMb,cAElB,4BAAQU,MAAM,WAAd,SACA,4BAAQA,MAAM,WAAd,OACA,4BAAQA,MAAM,WAAd,QACA,4BAAQA,MAAM,WAAd,aAIN,2BAAOa,KAAK,SAASb,MAAM,UAAUN,QAASkB,KAAKX,SACnD,2BACEY,KAAK,SACLb,MAAM,aACNN,QAASkB,KAAKH,YAEhB,kBAAC,EAAD,CACED,QAASI,KAAKT,MAAMK,QACpB1B,KAAM8B,KAAKT,MAAMrB,KACjBG,MAAO2B,KAAKT,MAAMb,oB,GAjEVwB,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1489a397.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport { TableRow } from '/';\r\n\r\nconst Table = (props) => {\r\n  return (\r\n    <>\r\n      <table>\r\n        <tbody id=\"main-grid\">\r\n          {props.rows.map((row) => {\r\n            return (\r\n              <TableRow\r\n                color={props.color}\r\n                numColumns={row.numColumns}\r\n                columns={row.columns}\r\n              ></TableRow>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport { TableCell } from '/';\r\n\r\nconst TableRow = (props) => {\r\n  return (\r\n    <tr>\r\n      {props.columns.map((column) => {\r\n        return <TableCell color={column.color} currentColor={props.color} />;\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst TableCell = (props) => {\r\n  return (\r\n    <td\r\n      style={{ backgroundColor: props.color }}\r\n      //   changes color of the cell when clicked\r\n      onClick={(e) => {\r\n        e.target.style.backgroundColor = props.currentColor;\r\n      }}\r\n    ></td>\r\n  );\r\n};\r\n\r\nexport default TableCell;\r\n","import React, { Component } from 'react';\r\nimport { Table } from './components';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentColor: 'green',\r\n      numRows: 1,\r\n      numColumns: 1,\r\n      rows: [{ columns: [{ color: 'gray' }] }]\r\n    };\r\n  }\r\n\r\n  // sets the color from what is chosen on the dropdown\r\n  setCurrentColor = (e) => {\r\n    this.setState({ currentColor: e.target.value });\r\n  };\r\n\r\n  // adds a new row\r\n  addRow = (e) => {\r\n    let newRows = this.state.rows.slice();\r\n    newRows.push({ columns: [] });\r\n    let count = 0;\r\n    while (count !== this.state.numColumns) {\r\n      newRows[newRows.length - 1].columns.push({ color: 'gray' });\r\n      count++;\r\n    }\r\n    this.setState({ numRows: this.state.numRows + 1, rows: newRows });\r\n  };\r\n\r\n  // adds a new column\r\n  addColumn = (e) => {\r\n    let newRows = this.state.rows;\r\n    newRows.forEach((row) => {\r\n      row.columns.push({ color: 'gray' });\r\n    });\r\n    this.setState({ numColumns: this.state.numColumns + 1, rows: newRows });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* dropdown menu*/}\r\n        <form>\r\n          <p>\r\n            <label>Select list</label>\r\n            <select\r\n              id=\"color-select\"\r\n              onChange={this.setCurrentColor}\r\n              value={this.state.currentColor}\r\n            >\r\n              <option value=\"#008000\">Green</option>\r\n              <option value=\"#FF0000\">Red</option>\r\n              <option value=\"#0000FF\">Blue</option>\r\n              <option value=\"#FFFF00\">Yellow</option>\r\n            </select>\r\n          </p>\r\n        </form>\r\n        <input type=\"submit\" value=\"Add Row\" onClick={this.addRow}></input>\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Add Column\"\r\n          onClick={this.addColumn}\r\n        ></input>\r\n        <Table\r\n          numRows={this.state.numRows}\r\n          rows={this.state.rows}\r\n          color={this.state.currentColor}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}